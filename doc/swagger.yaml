openapi: 3.0.0

servers:
  - url: //example.legend.io/api/v1
    description: Default server
info:
  description: |
    # Introduction
    API Spec for the legend, naive now. 
  version: "0.0.2"
  title: The Legend
  contact:
    name: API Support
    email: xuylin@sjtu.edu.cn
    url: 'https://github.com/linxuyalun'
  x-logo:
    url: 'https://cdn.shopify.com/s/files/1/2573/7056/collections/cskins_model_icons_no_text_square_black-12_large.png?v=1518446092'
    altText: The Legned logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: practitioners
    description: Operations about practitioner, a practitioner is a person to launch a case and manage it
  - name: cases
    description: A bankruptcy case is created by a practitioner, and every case is unique. All information can be seen in the case.
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
x-tagGroups:
  - name: General
    tags:
      - cases
      - store
  - name: User Management
    tags:
      - practitioners
paths:
  '/practitioners/registeration':
    post:
      tags:
        - practitioners
      summary: Create a new practitioner
      description: Create a new user via phone number
      responses:
        '200':
          description: successsful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: phone number has been registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true
        
  '/practitioners/login':
    post:
      tags:
        - practitioners
      summary: Practitioner login
      description: ''
      responses:
        '200':
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: invalid phone number or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true               
  
  '/practitioners/logout':
    get:
      tags:
        - practitioners
      summary: Practitioner logout
      description: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: logout successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  '/practitioners/authentication':
    post:
      tags:
        - practitioners
      summary: Practitioner real-name authentication
      description: |
        If a user doesn't pass the real-name authentication,
        user can neither launch a project nor accept a mission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: information uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/PractitionerRealNameAuthentication'
         
  
  '/practitioners/profile':
    get:
      tags: 
        - practitioners
      summary: view information of a practitioner
      description: viewing other users' information is unpermitted
      security:
        - bearerAuth: []
      responses:
        '200':
          description: user basic information
          content:
            application/json:
              schema:
                type: object
                properties:
                  personalInfo:
                    $ref: '#/components/schemas/PractitionerPersonalInfo'
                  contact:
                    $ref: '#/components/schemas/PractitionerContact'
                  occupationalInfo:
                    $ref: '#/components/schemas/PractitionerOccupationalInfo'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: real-name authentication is needed first or user hasn't pass real-name authentication yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: 
        - practitioners
      summary: update information of a practitioner
      description: >-
        Information can be updated is partial, 
        some information such as name, credentials and so on can't be modyfied.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: real-name authentication is needed first or user hasn't pass real-name authentication yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
      requestBody:
        $ref: '#/components/requestBodies/UpdatePractitionerInfo'
        
  
components:
  schemas:
    Account:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          description: must be your personal number
          type: string
          example: "18686862323"
          nullable: true
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          maxLength: 64
          pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
          example: drowssaP123
    Login:
      type: object
      properties:
        message:
          type: string
          example: Login successfully!
        token:
          type: string
          example: Header.Payload.Signature
    Error:
      type: object
      properties:
        message:
          type: string
          example: Invalid operation!
    
    Message:
      type: object
      properties:
        message:
          type: string
          example: Valid operation!
    
    PractitionerPersonalInfo:
      type: object
      properties:
        name:
          type: string
          description: user real name
          example: Randy Orton
        credentialsType:
          type: string
          description: credentials type
          enum:
            - id-card
            - others
        credentialsNumber:
          type: string
          description: credentials' number
          example: "533527198909210238"

    PractitionerContact:
      type: object
      properties:
        address:
          type: string
          description: user contact address
          example: Shanghai Jiaotong University
        mail:
          type: string
          format: email
          description: the email address to contact
    
    PractitionerOccupationalInfo:
      type: object
      properties:
        company:
          type: string
          description: the company user works for
          example: alibaba
        legalRepresentative:
          type: string
          description: the legal representative name for the company
          example: john cena
        phone:
          type: string
          description: the phone number of the company
        identity:
          type: string
          description: the identity of the industry user works in
          enum:
            - judge
            - lawyer
            - accountant
            - liquidator
            - financial-consultant
            - business-management
            - others
        position:
          type: string
          description: the position user in
          example: project manager

         
  requestBodies:
    PractitionerRealNameAuthentication:
      description: Created practitioner object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              files:
                type: object
                properties:
                  credentialsFront:
                    type: string
                    description: the image address of the face of credentials
                    example: store.legend.law/GUQMDUAOQ8NKQQ
                  credentialsBack:
                    type: string
                    description: the image address of the rear of credentials
                    example: store.legend.law/WOQKEHXUWIGFDMH
              personalInfo:
                $ref: '#/components/schemas/PractitionerPersonalInfo'
              occupationalInfo:
                $ref: '#/components/schemas/PractitionerOccupationalInfo'
              bankAccount:
                type: object
                properties:
                  todo:
                    type: string
                    example: todo
    
    UpdatePractitionerInfo:
      description: Update practitioner object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              files:
                type: object
                properties:
                  credentialsFront:
                    type: string
                    description: the image address of the face of credentials
                    example: store.legend.law/GUQMDUAOQ8NKQQ
                  credentialsBack:
                    type: string
                    description: the image address of the rear of credentials
                    example: store.legend.law/WOQKEHXUWIGFDMH
              personalInfo:
                $ref: '#/components/schemas/PractitionerPersonalInfo'
              occupationalInfo:
                $ref: '#/components/schemas/PractitionerOccupationalInfo'
              bankAccount:
                type: object
                properties:
                  todo:
                    type: string
                    example: todo
                    

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT