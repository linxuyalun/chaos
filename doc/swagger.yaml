openapi: 3.0.0

servers:
  - url: //example.legend.io/api/v1
    description: Default server
info:
  description: |
    # Introduction
    API Spec for the legend, naive now. 
  version: "0.0.2"
  title: The Legend
  contact:
    name: API Support
    email: xuylin@sjtu.edu.cn
    url: 'https://github.com/linxuyalun'
  x-logo:
    url: 'https://cdn.shopify.com/s/files/1/2573/7056/collections/cskins_model_icons_no_text_square_black-12_large.png?v=1518446092'
    altText: The Legned logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: practitioners
    description: Operations about practitioner, a practitioner is a person to launch a case and manage it
  - name: cases
    description: >-
      A bankruptcy case is created by a practitioner, and every case is unique.
      All information can be seen in the case.
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
x-tagGroups:
  - name: General
    tags:
      - cases
      - store
  - name: User Management
    tags:
      - practitioners
paths:
  '/practitioners/registeration':
    post:
      tags:
        - practitioners
      summary: Create a new practitioner
      description: Create a new user via phone number
      responses:
        '200':
          description: successsful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: phone number has been registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true
        
  '/practitioners/login':
    post:
      tags:
        - practitioners
      summary: Practitioner login
      description: ''
      responses:
        '200':
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: invalid phone number or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true               
  
  '/practitioners/logout':
    get:
      tags:
        - practitioners
      summary: Practitioner logout
      description: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: logout successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  '/practitioners/authentication':
    post:
      tags:
        - practitioners
      summary: Practitioner real-name authentication
      description: |
        If a user doesn't pass the real-name authentication,
        user can neither launch a project nor accept a mission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: information uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/PractitionerRealNameAuthentication'
         
  
  '/practitioners/profile':
    get:
      tags: 
        - practitioners
      summary: view information of a practitioner
      description: viewing other users' information is unpermitted
      security:
        - bearerAuth: []
      responses:
        '200':
          description: user basic information
          content:
            application/json:
              schema:
                type: object
                properties:
                  personal_info:
                    $ref: '#/components/schemas/PractitionerPersonalInfo'
                  contact:
                    $ref: '#/components/schemas/PractitionerContact'
                  occupational_info:
                    $ref: '#/components/schemas/PractitionerOccupationalInfo'
                  case_info:
                    type: object
                    
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: real-name authentication is needed first or user hasn't pass real-name authentication yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: 
        - practitioners
      summary: update information of a practitioner
      description: >-
        Information can be updated is partial, 
        some information such as name, credentials and so on can't be modyfied.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: real-name authentication is needed first or user hasn't pass real-name authentication yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
      requestBody:
        $ref: '#/components/requestBodies/UpdatePractitionerInfo'
  
  '/cases':
    post:
      tags:
        - cases
      summary: launch a new case
      description: >-
        Practitioners can launch a new case. 
        When a new case is createrd, the remaining workflow is case-driven.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: initiate the case successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: initiate case successfully!
                  case_id:
                    description: the only id of the case
                    type: string
                    format: uuid
                    example: 550e8400-e29b-41d4-a716-446655440000
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: real-name authentication is needed first or user hasn't pass real-name authentication yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
      requestBody:
        $ref: '#/components/requestBodies/CaseInfo'
        
  
components:
  schemas:
    Account:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          description: must be your personal number
          type: string
          example: "18686862323"
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          maxLength: 64
          pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
          example: drowssaP123
    
    Login:
      type: object
      properties:
        message:
          type: string
          example: Login successfully!
        token:
          type: string
          example: Header.Payload.Signature
    
    Error:
      type: object
      properties:
        message:
          type: string
          example: Invalid operation!
    
    Message:
      type: object
      properties:
        message:
          type: string
          example: Valid operation!
    
    PractitionerPersonalInfo:
      type: object
      properties:
        name:
          type: string
          description: user real name
          example: Randy Orton
        credentials_type:
          type: string
          description: credentials type
          enum:
            - id-card
            - others
        credentials_number:
          type: string
          description: credentials' number
          example: "533527198909210238"

    PractitionerContact:
      type: object
      properties:
        address:
          type: string
          description: user contact address
          example: Shanghai Jiaotong University
        mail:
          type: string
          format: email
          description: the email address to contact
    
    PractitionerOccupationalInfo:
      type: object
      properties:
        company:
          type: string
          description: the company user works for
          example: alibaba
        legal_representative:
          type: string
          description: the legal representative name for the company
          example: john cena
        company_contact:
          type: string
          description: the phone number of the company
        identity:
          type: string
          description: the identity of the industry user works in
          enum:
            - judge
            - lawyer
            - accountant
            - liquidator
            - financial-consultant
            - business-management
            - others
        position:
          type: string
          description: the position user in
          example: project manager
    
    Debtor:
      type: object
      properties:
        company_name:
          type: string
          example: alibaba
        credit_number:
          type: string
          description: Credit No. is the unique id for a company
          example: "3829472048295672049"
        address:
          type: string
          description: address is the address of the registered address of the company
          example: Shanghai Jiaotong University
        business_scope:
          type: string
          example: clothes
        registered_capital:
          type: string
          example: 5 millions
        subscribed_capital:
          type: string
          example: 3 millions
        establishment_day:
          type: string
          example: 2016/05/26
        company_contact:
          type: string
          example: 5385470
        registration_authority:
          type: string
          example: Shanghai Trade and Industry Bureau
        legal_representative:
          type: object
          description: the legal representative for the company
          properties:
            name:
              type: string
              example: john cena
            credentials_number:
              type: string
              description: credentials' number
              example: "533527198909210238"
            phone:
              type: string
              example: "13822098739"
          
    CompanyApplicant:
      description: The applicant is a company
      allOf:
        - $ref: '#/components/schemas/Applicant'
        - type: object
          properties:
            company_name:
              type: string
              example: alibaba
            credit_number:
              type: string
              description: Credit No. is the unique id for a company
              example: "3829472048295672049"
    
    NaturalPersonApplicant:
      description: The applicant is a natural person
      allOf:
        - $ref: '#/components/schemas/Applicant'
        - type: object
          properties:
            natural_person_name:
              type: string
              example: Nakamura
            credentials_number:
              type: string
              description: credentials' number
              example: "533527198909210238"
    
    Applicant:
      type: object
      description: the person who want to launch the case
      discriminator:
        propertyName: applicant_type
        mapping:
          company: '#/components/schemas/CompanyApplicant'
          natural_person: '#/components/schemas/NaturalPersonApplicant'
      properties:
        application_type:
          description: type of the application
          type: string
          enum:
            - creditor-application
            - debtor-application
            - shareholder-application
        applicant_type:
          description: type of the applicant
          
      
        
          

         
  requestBodies:
    PractitionerRealNameAuthentication:
      description: Created practitioner object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              files:
                type: object
                properties:
                  credentials_front:
                    type: string
                    description: the image address of the face of credentials
                    example: store.legend.law/GUQMDUAOQ8NKQQ
                  credentials_back:
                    type: string
                    description: the image address of the rear of credentials
                    example: store.legend.law/WOQKEHXUWIGFDMH
              personal_info:
                $ref: '#/components/schemas/PractitionerPersonalInfo'
              contact:
                $ref: '#/components/schemas/PractitionerContact'
              occupational_info:
                $ref: '#/components/schemas/PractitionerOccupationalInfo'
              bank_account:
                type: object
                properties:
                  todo:
                    type: string
                    example: todo
    
    UpdatePractitionerInfo:
      description: Update practitioner object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              contact:
                $ref: '#/components/schemas/PractitionerContact'
              occupational_info:
                $ref: '#/components/schemas/PractitionerOccupationalInfo'

    CaseInfo:
      description: information of initiate a case
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              case_type:
                type: string
                enum:
                  - A
                  - B
                  - C
                  - D
                  - E
              debtor:
                $ref: '#/components/schemas/Debtor'
              applicant:
                $ref: '#/components/schemas/Applicant'
                

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
