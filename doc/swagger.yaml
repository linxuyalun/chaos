openapi: 3.0.0

servers:
  - url: //example.legend.io/api/v1
    description: Default server
info:
  description: |
    # Introduction
    API Spec for the legend, naive now. 
  version: "0.0.2"
  title: The Legend
  contact:
    name: API Support
    email: xuylin@sjtu.edu.cn
    url: 'https://github.com/linxuyalun'
  x-logo:
    url: 'https://cdn.shopify.com/s/files/1/2573/7056/collections/cskins_model_icons_no_text_square_black-12_large.png?v=1518446092'
    altText: The Legned logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: practitioners
    description: Operations about practitioner, a practitioner is a person to launch a case and manage it
  - name: creditors
    description: >-
      A creditor id in different cases can be the same. 
  - name: cases
    description: >-
      A bankruptcy case is created by a practitioner, and every case is unique.
      All information can be seen in the case.

x-tagGroups:
  - name: General
    tags:
      - cases
  - name: User Management
    tags:
      - practitioners
      - creditors
paths:
  '/practitioners/registeration':
    post:
      tags:
        - practitioners
      summary: Create a new practitioner
      description: Create a new user via phone number
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse' 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true
        
  '/practitioners/login':
    post:
      tags:
        - practitioners
      summary: Practitioner login
      description: ''
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true               
  
  '/practitioners/logout':
    get:
      tags:
        - practitioners
      summary: Practitioner logout
      description: ''
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
        
  '/practitioners/authentication':
    post:
      tags:
        - practitioners
      summary: Practitioner real-name authentication
      description: |
        If a user doesn't pass the real-name authentication,
        user can neither launch a project nor accept a mission
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
      requestBody:
        $ref: '#/components/requestBodies/PractitionerRealNameAuthentication'
         
  '/practitioners/profile':
    get:
      tags: 
        - practitioners
      summary: view information of a practitioner
      description: viewing other users' information is unpermitted
      security:
        - BearerAuth: []
      responses:
        '200': 
          $ref: '#/components/responses/PractitionersProfileResponse'
    put:
      tags: 
        - practitioners
      summary: update information of a practitioner
      description: >-
        Information can be updated is partial, 
        some information such as name, credentials and so on can't be modyfied.
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
      requestBody:
        $ref: '#/components/requestBodies/UpdatePractitionerInfo'
  
  '/practitioners/registration-code':
    get:
      tags:
        - practitioners
      summary: get practitioner registration code
      description: get the registration code of the practitioner
      security:
        - BearerAuth: []
      responses:
        '200': 
          $ref: '#/components/responses/RegistrationCodeResponse'


  '/cases':
    post:
      tags:
        - cases
      summary: launch a new case
      description: >-
        Practitioners can launch a new case. 
        When a new case is createrd, the remaining workflow is case-driven.
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/CreateCaseResponse'
      requestBody:
        $ref: '#/components/requestBodies/CaseInfo'
  
  '/cases/{case_id}':
    get:
      tags:
        - cases
      summary: basic information of the specific case
      parameters:
        - name: case_id
          in: path
          description: uuid of the case
          required: true
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      description: >-
        Basic information of the specific case will be shown.
        It will return different roll based on the token
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/CaseInfoResponse'

  '/cases/{case_id}/info-table':
    parameters:
      - name: case_id
        in: path
        description: uuid of the case
        required: true
        schema:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000 
    get:
      tags:
        - cases
      security:
        - BearerAuth: []
      summary: get the case information table
      description: >-
        It will return the download url of the case information table.
        Many information of the case will be recoded in the table.     
      responses:
        '200':
          $ref: '#/components/responses/InfoTableResponse'  
    post:
      tags:
        - cases
      security:
        - BearerAuth: []
      summary: upload the case information table
      description: >-
        upload the case information table.   
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
      requestBody:
        description: information of initiate a case
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                case_info_table:
                  type: string
                  description: the case info table url

  '/cases/invitation':  
    get:
      tags:
        - cases
      security:
        - BearerAuth: []
      summary: Return all the cases the practitioner invited.
      description: >-
        A practitioner can receive the invitation and check the case basic information. 
        This will return the cases the practitioner hasn't passed the invitation yet.
      responses:
        '200':
          $ref: '#/components/responses/CaseInvitationResponse'

  '/cases/{case_id}/accept':
    parameters:
      - name: case_id
        in: path
        description: uuid of the case
        required: true
        schema:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
    get:
      tags:
        - cases
      security:
        - BearerAuth: []
      summary: The practitioner accept the invitation.
      description: >-
        A practitioner accept the invitation
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
  
  '/cases/{case_id}/invitation':
    parameters:
      - name: case_id
        in: path
        description: uuid of the case
        required: true
        schema:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
    post:
      tags:
        - cases
      security:
        - BearerAuth: []
      summary: Invite other practitioners to join the case.
      description: >-
        When invite other practitioners, the manager also need to assign a role to every practitioner.  
      responses:
        '200':
          $ref: '#/components/responses/NormalResponse'
      requestBody:
        description: an array of the practitioner registration code
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registration_codes:
                  type: array
                  items:
                    type: object
                    properties:
                      registration_code:
                        type: string
                        example: todo
                      roll:
                        description: the roll of the practitioner
                        type: string
                        enum:
                          - manager
                          - visitor
                          - other


  '/creditors/login':
    post:
      tags:
        - creditors
      summary: Credetor login.
      description: >-
        Creditor login. Case id, credentials number and password are needed.
      responses:
        '200':
          $ref: '#/components/responses/RegistrationCodeResponse'
      requestBody:
        description: creditor login information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredetorAccount'
  
  '/creditors/registeration':
    post:
      tags:
        - creditors
      summary: Credetor register.
      description: >-
        Creditor register.
      responses:
        '200':
          $ref: '#/components/responses/RegistrationCodeResponse'
      requestBody:
        description: creditor login information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredetorAccountRegister'
              
  
  
components:
  schemas:
    Account:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          description: must be your personal number
          type: string
          example: "18686862323"
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          maxLength: 64
          pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
          example: drowssaP123
    
    CredetorAccount:
      type: object
      properties:
        case_id:
          description: the only id of the case
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        credentials:
          description: creditor username, can be id-card number or credit number
          type: string
          example: "533527198909210238"
        password:
          type: string
          description: Credetor password.
          format: password
          example: drowssaP123

    EnterpriseLegalCredetor:
      description: The credetor type is enterprise legal
      allOf:
        - $ref: '#/components/schemas/CredetorAccountRegister'
        - type: object
          properties:
            case_id:
              description: the only id of the case
              type: string
              format: uuid
              example: 550e8400-e29b-41d4-a716-446655440000
            legal_name:
              description: Enterprise legal name.
              example: Mark Henry
            legal_credentials:
              description: credit number of the legal
              type: string
              example: "5335271"
            legal_phone:
              description: legal cantact number
              type: string
              example: "13425683749"
            password:
              type: string
              description: >-
                User password, MUST contain a mix of upper and lower case letters,
                as well as digits
              format: password
              minLength: 8
              maxLength: 64
              pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
              example: drowssaP123
            todo:
              type: string
              example: 法人开户受托人、身份证号、用户协议
            
    NaturalPersonCredetor:
      description: The credetor type is natural person
      allOf:
        - $ref: '#/components/schemas/CredetorAccountRegister'
        - type: object
          properties:
            case_id:
              description: the only id of the case
              type: string
              format: uuid
              example: 550e8400-e29b-41d4-a716-446655440000
            name:
              description: Narural person name.
              example: Mark Henry
            credentials:
              description: id card number of the natural person
              type: string
              example: "533527198909210238"
            phone:
              description: natural person phone number
              type: string
              example: "13425683749"
            password:
              type: string
              description: >-
                User password, MUST contain a mix of upper and lower case letters,
                as well as digits
              format: password
              minLength: 8
              maxLength: 64
              pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
              example: drowssaP123
            todo:
              type: string
              example: 用户协议            
            
    
    CredetorAccountRegister:
      type: object
      discriminator:
        propertyName: credetor_type
        mapping:
          enterprise-legal: '#/components/schemas/EnterpriseLegalCredetor'
          natural-person: '#/components/schemas/NaturalPersonCredetor'
      properties:
        claim_declaration_agreement:
          description: >-
            If a Credetor wants to register, he/she must agree the claim declaration agreement
            0 represents unagree, 1 represents agree
          type: integer
          enum:
            - 0
            - 1
        credetor_type:
          type: string
          enum:
            - enterprise-legal
            - natural-person
            

    Login:
      type: object
      properties:
        message:
          type: string
          example: Login successfully!
        token:
          type: string
          example: Header.Payload.Signature
    
    Error:
      type: object
      properties:
        status_code:
          description: invalid operation
          type: integer
          enum:
            - 401
            - 403
            - 409
        message:
          type: string
          example: Invalid operation!
    
    MessageOnly:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: Valid operation!
    
    200PractitionersProfile:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: Get practitioners profile successfully!  
        body:
          type: object
          properties:
            personal_info:
              $ref: '#/components/schemas/PractitionerPersonalInfo'
            contact:
              $ref: '#/components/schemas/PractitionerContact'
            occupational_info:
              $ref: '#/components/schemas/PractitionerOccupationalInfo'
            cases:
              description: the cases the practitioner involves
              type: array
              items:
                $ref: '#/components/schemas/CaseBasicInfo'

    
    200RegistrationCode:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: Get practitioner registration code successfully!  
        body:
          type: object
          properties:
            registration_code:
              type: string
              description: the registration code of the practitioner
              example: todo   
    
    200InfoTable:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: Get case info table successfully!
        body:
          type: object
          properties:
            download_field:
              description: |
                The download field of the case information table.
                field can be nullable.
              type: string
              nullable: true   

    200CaseInfo:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: initiate case successfully!
        body:
          $ref: '#/components/schemas/CaseInfo'

    200CaseId:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: initiate case successfully!
        body:
          type: object
          properties:
            case_id:
              description: the only id of the case
              type: string
              format: uuid
              example: 550e8400-e29b-41d4-a716-446655440000  
    
    200RecieveInvitationResponse:
      type: object
      properties:
        status_code:
          description: successful operation
          type: integer
          enum:
            - 200
        message:
          type: string
          example: receive invitation successfully!
        body:
          type: object
          properties:          
            case_info:
              type: array
              nullable: true
              items:
                allOf:
                  - type: object
                    properties:
                      case_id:
                        type: string
                        format: uuid
                        example: 550e8400-e29b-41d4-a716-446655440000
                  - $ref: '#/components/schemas/CaseInfo'

    
    PractitionerPersonalInfo:
      type: object
      properties:
        name:
          type: string
          description: user real name
          example: Randy Orton
        credentials_type:
          type: string
          description: credentials type
          enum:
            - id-card
            - others
        credentials_number:
          type: string
          description: credentials' number
          example: "533527198909210238"

    PractitionerContact:
      type: object
      properties:
        address:
          type: string
          description: user contact address
          example: Shanghai Jiaotong University
        mail:
          type: string
          format: email
          description: the email address to contact
    
    PractitionerOccupationalInfo:
      type: object
      properties:
        company:
          type: string
          description: the company user works for
          example: alibaba
        legal_representative:
          type: string
          description: the legal representative name for the company
          example: john cena
        company_contact:
          type: string
          description: the phone number of the company
        identity:
          type: string
          description: the identity of the industry user works in
          enum:
            - judge
            - lawyer
            - accountant
            - liquidator
            - financial-consultant
            - business-management
            - others
        position:
          type: string
          description: the position user in
          example: project manager
    
    Debtor:
      type: object
      properties:
        company_name:
          type: string
          example: alibaba
        credit_number:
          type: string
          description: Credit No. is the unique id for a company
          example: "3829472048295672049"
        address:
          type: string
          description: address is the address of the registered address of the company
          example: Shanghai Jiaotong University
        business_scope:
          type: string
          example: clothes
        registered_capital:
          type: string
          example: 5 millions
        subscribed_capital:
          type: string
          example: 3 millions
        establishment_day:
          type: string
          example: 2016/05/26
        company_contact:
          type: string
          example: "5385470"
        registration_authority:
          type: string
          example: Shanghai Trade and Industry Bureau
        legal_representative:
          type: object
          description: the legal representative for the company
          properties:
            name:
              type: string
              example: john cena
            credentials_number:
              type: string
              description: credentials' number
              example: "533527198909210238"
            phone:
              type: string
              example: "13822098739"
          
    Trustee:
      description: A trustee is a person or firm that holds or administers property or assets for the benefit of a third party
      type: object
      properties:
        name:
          type: string
          description: name of trustee
          example: Dan
        credentials_number:
            type: string
            description: credentials' number
            example: "533527198909210238"
        company:
          type: string
          description: the company user works for
          example: alibaba
        company_contact:
          type: string
          description: the phone number of the company
          example: "5385470"
        address:
          type: string
          description: address is the address of the trustee
          example: Shanghai Jiaotong University
        
    
    CompanyApplicant:
      description: The applicant is a company
      allOf:
        - $ref: '#/components/schemas/Applicant'
        - type: object
          properties:
            company_name:
              type: string
              example: alibaba
            credit_number:
              type: string
              description: Credit No. is the unique id for a company
              example: "3829472048295672049"
            legal_representative:
              description: the legal representative for the company
              type: string
              example: john cena
            address:
              type: string
              description: address is the address of the registered address of the company
              example: Shanghai Jiaotong University
            company_contact:
              type: string
              example: "5385470"
            trustee:
              $ref: '#/components/schemas/Trustee'
    
    NaturalPersonApplicant:
      description: The applicant is a natural person
      allOf:
        - $ref: '#/components/schemas/Applicant'
        - type: object
          properties:
            natural_person_name:
              type: string
              example: Nakamura
            credentials_number:
              type: string
              description: credentials' number
              example: "533527198909210238"
            phone:
              type: string
              description: the phone number of the company
              example: "13923456728"
            address:
              type: string
              description: address is the address of the natural person
              example: Shanghai Jiaotong University
            trustees:
              type: array
              minLength: 1
              maxLength: 4
              items:
                $ref: '#/components/schemas/Trustee'
            
    Applicant:
      type: object
      description: the person who want to launch the case
      discriminator:
        propertyName: applicant_type
        mapping:
          company: '#/components/schemas/CompanyApplicant'
          natural_person: '#/components/schemas/NaturalPersonApplicant'
      properties:
        application_type:
          description: type of the application
          type: string
          enum:
            - creditor-application
            - debtor-application
            - shareholder-application
        applicant_type:
          description: type of the applicant
          type: string
        
    Court:
      type: object
      description: information of the court
      properties:
        name:
          type: string
          example: the Higher People's Court of Shanghai
        address:
          type: string
          description: address of the court
          example: 1200 Hongqiao Road, Changning District, Shanghai, China
        contact:
          type: string
          description: court contact
          example: "021-34254567"
        presiding_judge:
          type: string
          example: Lin
        collegial_panel_members:
          type: string
          example: Siyuan, Yifan, Cece
        judge_assistant:
          type: string
          example: Kane
        clerk:
          type: string
          example: Rock
      
    CaseInfo:
      description: basic information of the case
      type: object
      properties:
        id:
          type: string
          description: the real-world id of the case
          example: "(2011) the second court No. 92"
        acceptance_time:
          type: string
          description: Acceptance Time Of The Court (Arbitral Authority)
          example: 2018/08/24
        first_meeting_point:
          type: string
          example: 2019/01/01
        second_meeting_point:
          type: string
          example: 2019/02/02
        todo:
          type: string
          example: todo
    
    ManagerInfo:
      description: basic information of the case manager
      properties:
        responsible_body_full_name:
          type: string
          description: Full name of the responsible body
          example: The legend Manager
        principal:
          type: string
          description: the principal of the responsible body
          example: Batista
        contact:
          type: string
          description: contact of the manager
          example: "56798420"
        address:
          type: string
          description: the contact address of the manager
          example: "4 Chome-3-11 Shiba, Minato City, Tokyo 108-0014"
          
    LiquidationTeamAsManager:
      description: The liquidation team is composed of several natural persons, which may be in different companies.
      allOf:
        - $ref: '#/components/schemas/ManagerMembers'
        - type: object
          properties:
            liquidation_team_members:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: the name of the liquidation team member
                    example: Yong
                  company:
                    type: string
                    description: the company the liquidation team member is in
                    example: alibaba

    SingleAgencyAsManager:
      description: The manager is actually a single agency.
      allOf:
        - $ref: '#/components/schemas/ManagerMembers'
        - type: object
          properties:
            agency_name:
              type: string
              example: The legend Agency

    MulAgenciesAsManager:
      description: The managers are composed of multiple agencies.
      allOf:
        - $ref: '#/components/schemas/ManagerMembers'
        - type: object
          properties:
            agencies_name:
              type: array
              items:
                type: string
                example: the Legend Agency
    
    NaturalPersonAsManager:
      description: The manager is actually a single natural person.
      allOf:
        - $ref: '#/components/schemas/ManagerMembers'
        - type: object
          properties:
            natural_person_name:
              type: string
              description: the name of the natural person
              example: Yong
            natural_person_company:
              type: string
              description: the company the natural person is in
              example: alibaba
    
    ManagerMembers:      
      type: object
      description: the manager composition model and basic information of manager members
      discriminator:
        propertyName: composition_model
        mapping:
          liquidation_team: '#/components/schemas/LiquidationTeamAsManager'
          single_agency: '#/components/schemas/SingleAgencyAsManager'
          mul_agencies: '#/components/schemas/MulAgenciesAsManager'
          natural_person: '#/components/schemas/NaturalPersonAsManager'
      properties:
        composition_model:
          description: type of the manager composition
          type: string

    CaseBasicInfo:
      type: object
      properties:
        case_info:
          $ref: '#/components/schemas/CaseInfo'
        roll:
          type: string
          description: the roll of the case the practitioner in
          enum:
            - visitor
            - manager
            - todo


         
  requestBodies:
    PractitionerRealNameAuthentication:
      description: Created practitioner object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              files:
                type: object
                properties:
                  credentials_front:
                    type: string
                    description: the image address of the face of credentials
                    example: store.legend.law/GUQMDUAOQ8NKQQ
                  credentials_back:
                    type: string
                    description: the image address of the rear of credentials
                    example: store.legend.law/WOQKEHXUWIGFDMH
              personal_info:
                $ref: '#/components/schemas/PractitionerPersonalInfo'
              contact:
                $ref: '#/components/schemas/PractitionerContact'
              occupational_info:
                $ref: '#/components/schemas/PractitionerOccupationalInfo'
              bank_account:
                type: object
                properties:
                  todo:
                    type: string
                    example: todo
    
    UpdatePractitionerInfo:
      description: Update practitioner object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              contact:
                $ref: '#/components/schemas/PractitionerContact'
              occupational_info:
                $ref: '#/components/schemas/PractitionerOccupationalInfo'

    CaseInfo:
      description: information of initiate a case
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              case_type:
                type: string
                enum:
                  - A
                  - B
                  - C
                  - D
                  - E
              contact:
                type: object
                description: the public contact of the case
                properties:
                  name:
                    type: string
                    description: name of the contact
                    example: Adam Cole
                  phone:
                    type: string
                    example: "13278302983"
                  fixed_line:
                    type: string
                    example: "021-54678924"
                    nullable: true
              debtor:
                $ref: '#/components/schemas/Debtor'
              applicant:
                $ref: '#/components/schemas/Applicant'
              court:
                $ref: '#/components/schemas/Court'
              case_info:
                $ref: '#/components/schemas/CaseInfo'
              manager_info:
                $ref: '#/components/schemas/ManagerInfo'
              manager_members:
                $ref: '#/components/schemas/ManagerMembers'
              files:
                type: object
                properties:
                  todo:
                    type: string
                    example: todo
              toll:
                type: object
                properties:
                  todo:
                    type: string
                    example: todo


  responses:
    NormalResponse:
      description: normal response obejct
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/MessageOnly'
              - $ref: '#/components/schemas/Error'

    PractitionersProfileResponse:
      description: the basic information of the practitioners
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/200PractitionersProfile'
              - $ref: '#/components/schemas/Error'
      
    RegistrationCodeResponse:
      description: the registration code of the practitioner
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/200RegistrationCode'
              - $ref: '#/components/schemas/Error'

    InfoTableResponse:
      description: case information table response obejct
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/200InfoTable'
              - $ref: '#/components/schemas/Error'
    
    CaseInfoResponse:
      description: basic information of the case
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/200CaseInfo'
              - $ref: '#/components/schemas/Error'

    CreateCaseResponse:
      description: return the uuid of the case
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/200CaseId'
              - $ref: '#/components/schemas/Error'
    
    CaseInvitationResponse:
      description: return the invitation response, including case basic information.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/200RecieveInvitationResponse'
              - $ref: '#/components/schemas/Error'


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT