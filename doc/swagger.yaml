openapi: 3.0.0

servers:
  - url: //example.legend.io/api/v1
    description: Default server
info:
  description: |
    # Introduction
    API Spec for the legend, naive now. 
  version: "0.0.2"
  title: The Legend
  contact:
    name: API Support
    email: xuylin@sjtu.edu.cn
    url: 'https://github.com/linxuyalun'
  x-logo:
    url: 'https://cdn.shopify.com/s/files/1/2573/7056/collections/cskins_model_icons_no_text_square_black-12_large.png?v=1518446092'
    altText: The Legned logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: users
    description: Operations about users
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
x-tagGroups:
  - name: General
    tags:
      - pet
      - store
  - name: User Management
    tags:
      - users
paths:
  '/users':
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user via phone number
      responses:
        '200':
          description: successsful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: phone number has been registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true
        
  '/users/login':
    post:
      tags:
        - users
      summary: User login
      description: ''
      responses:
        '200':
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: invalid phone number or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Created user object
        required: true               
  
  '/users/logout':
    get:
      tags:
        - users
      summary: User logout
      description: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: logout successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  '/users/authentication':
    post:
      tags:
        - users
      summary: user real-name authentication
      description: |
        If a user doesn't pass the real-name authentication,
        user can neither launch a project nor accept a mission
      security:
        - bearerAuth: []
      responses:
        '200':
          description: information uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data::
            schema:
              $ref: '#/components/requestBodies/RealNameAuthentication'
        description: Created user object
        required: true  
  
  '/users/profile':
    get:
      tags: 
        - users
      summary: view information of user
      description: viewing other users' information is unpermitted
      security:
        - bearerAuth: []
      responses:
        '401':
          description: User not login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: real-name authentication is needed first or user hasn't pass real-name authentication yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      
      
      
  
components:
  schemas:
    Account:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          description: must be your personal number
          type: string
          example: 18686862323
          nullable: true
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          maxLength: 64
          pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
          example: drowssaP123
    Login:
      type: object
      properties:
        message:
          type: string
          example: Login successfully!
        token:
          type: string
          example: Header.Payload.Signature
    Error:
      type: object
      properties:
        message:
          type: string
          example: Invalid operation!
    
    Message:
      type: object
      properties:
        message:
          type: string
          example: Valid operation!

  requestBodies:
    RealNameAuthentication:
      type: object
      properties:
        idCardFront:
          type: string
          description: the image of the face of id card
          format: binary
        idCardBack:
          type: string
          description: the image of the rear of id card
          format: binary
        name:
          type: string
          description: user real name
          example: Randy Orton
        idCardType:
          type: string
          description: user id card type
          enum:
            - type A
            - type B
            - type C
            - type D
        idCardNumber:
          type: string
          description: user id card number
        address:
          type: string
          description: user contact address
          example: Shanghai Jiaotong University
        mail:
          type: string
          format: email
        test:
          type: object
          properties:
            idCardNumber:
              type: string
              description: user id card number
            address:
              type: string
              description: user contact address
              example: Shanghai Jiaotong University
            mail:
              type: string
              format: email
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT